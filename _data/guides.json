{
	"models": 
	{
		"BASNet": {
			"title": "Salient object detection",
			"description": "Extract a segmentation mask of an image's foreground.",
			"github": "examples/models/BASNet.ipynb"
		},
		"deepdream": {
			"title": "DeepDream",
			"description": "Visualize and compose abstract textures using neural network feature detectors.",
			"github": "examples/models/deepdream.ipynb"
		},
		"neural_style": {
			"title": "Neural style transfer",
			"description": "Generate images with the style characteristics of other images.",
			"github": "examples/models/neural_style.ipynb"
		},
		"SPADE": {
			"title": "Image-to-image translation",
			"description": "Generate photorealistic imagery from semantic label maps.",
			"github": "examples/models/SPADE.ipynb"
		},
		"stylegan2": {
			"title": "StyleGAN2",
			"description": "State-of-the-art generative modeling for images.",
			"github": "examples/models/stylegan2_ada.ipynb",
			"video_thumb": true
		},
		"ESRGAN": {
			"title": "Super-resolution",
			"description": "Image upsampling and photo enhancement.",
			"github": "examples/models/ESRGAN.ipynb"
		},
		"cartoonization": {
			"title": "Cartoonization",
			"description": "Convert a photograph into a cartoon.",
			"github": "examples/models/cartoonization.ipynb"
		},
		"semantic_segmentation": {
			"title": "Semantic segmentation",
			"description": "Segment the pixels of an image into their respective object categories.",
			"github": "examples/models/semantic_segmentation.ipynb"
		},
		"tacotron2": {
			"title": "Text-to-speech synthesis.",
			"description": "Generate audio speech samples from text prompts.",
			"github": "examples/models/tacotron2.ipynb"
		},
		"glow": {
			"title": "Reversible generative models",
			"description": "Lossless inversion of face images into the latent space of a generative model.",
			"github": "examples/models/glow.ipynb"
		},
		"face_processing": {
			"title": "Processing faces",
			"description": "Detect, parse, identify, and track faces in images.",
			"github": "examples/tools/face_processing.ipynb"
		},
		"PhotoSketch": {
			"title": "Photo sketching",
			"description": "Convert photographs into contour drawings or sketches.",
			"github": "examples/models/PhotoSketch.ipynb"
		},
		"Wav2Lip": {
			"title": "Lip-syncing videos",
			"description": "Animate mouths in images and videos, lip-syncing from audio recordings.",
			"github": "examples/models/Wav2Lip.ipynb"
		},
		"idinvert": {
			"title": "GAN inversion",
			"description": "Encode real images into the latent space of a pre-trained GAN",
			"github": "examples/models/idinvert.ipynb"
		},
		"FlowNetPytorch": {
			"title": "Optical flow",
			"description": "Compute optical flow between images to detect and measure motion.",
			"github": "examples/models/FlowNetPytorch.ipynb"
		}
	},
	"fundamentals": 
	{
		"fundamentals": {
			"title": "Fundamentals of machine learning",
			"description": "Mathematical essentials for machine learning.",
			"github": "examples/fundamentals/fundamentals.ipynb"
		},
		"intro_python": {
			"title": "Essentials of Python",
			"description": "A basic overview of programming with Python.",
			"github": "examples/fundamentals/intro_python.ipynb"
		},
		"math_review_numpy": {
			"title": "Foundational mathematics",
			"description": "A review of relevant concepts from linear algebra and calculus, and intro to Numpy.",
			"github": "examples/fundamentals/math_review_numpy.ipynb"
		},
		"classification_kNN": {
			"title": "Classification & k-Nearest Neighbors",
			"description": "Introduction to classification using k-nearest neighbors algorithm",
			"github": "examples/fundamentals/classification_kNN.ipynb"
		},
		"linear_regression": {
			"title": "Linear regression",
			"description": "Modeling data with line of best fit, basic gradient descent",
			"github": "examples/fundamentals/linear_regression.ipynb"
		},
		"diy_neural_network": {
			"title": "DIY neural network",
			"description": "A numpy implementation of a neural network from scratch",
			"github": "examples/fundamentals/diy_neural_network.ipynb"
		},
		"simple_neural_networks": {
			"title": "Neural networks in Keras",
			"description": "How to train a simple feedforward neural network",
			"github": "examples/fundamentals/simple_neural_networks.ipynb"
		},	
		"keras_classification": {
			"title": "Neural nets for classification",
			"description": "How to apply neural networks for classification",
			"github": "examples/fundamentals/keras_classification.ipynb"
		},
		"convolutional_neural_networks": {
			"title": "Convolutional neural networks",
			"description": "How to train a convolutional neural network",
			"github": "examples/fundamentals/convolutional_neural_networks.ipynb"
		},
		"transfer_learning": {
			"title": "Transfer learning",
			"description": "Training accurate image classifiers on small datasets",
			"github": "examples/fundamentals/transfer_learning.ipynb"
		}
	},
	"ml5": 
	{
		"face_collage": {
			"title": "Face Collage",
			"description": "Analyze images of faces, and make silly collages of face parts.",
			"github": "______TBD_______",
			"p5js": "https://editor.p5js.org/AndreasRef/sketches/3dDj1e28Z"
		}
	}
	
}